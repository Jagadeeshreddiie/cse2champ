Experiment 7: Working with Triggers using PL/SQL.
--------------------------------------------------------------
Develop programs using BEFORE and AFTER Triggers, Row and Statement Triggers and INSTEAD OF Triggers.

Definition
------------
Triggers are stored procedures, which are automatically executed or fired when some events occur. Triggers are, in fact, written to be executed in response to any of the following events -
->    A database manipulation (DML) statement (DELETE, INSERT, or UPDATE)
->    A database definition (DDL) statement (CREATE, ALTER, or DROP).

Creating Triggers - syntax
-------------------------------
CREATE [OR REPLACE ] TRIGGER trigger_name  
{BEFORE | AFTER | INSTEAD OF }  
{INSERT [OR] | UPDATE [OR] | DELETE}  
[OF col_name]  
ON table_name  
[REFERENCING OLD AS o NEW AS n]  
[FOR EACH ROW]  
WHEN (condition)   
  DECLARE 
   Declaration-statements 
BEGIN  
   Executable-statements 
EXCEPTION 
   Exception-handling-statements 
END; 
Where,
-> CREATE [OR REPLACE] TRIGGER trigger_name - Creates or replaces an existing trigger with the trigger_name.
-> {BEFORE | AFTER | INSTEAD OF} - This specifies when the trigger will be executed. The INSTEAD OF clause is used for creating trigger on a view.
-> {INSERT [OR] | UPDATE [OR] | DELETE} - This specifies the DML operation.
    [OF col_name] - This specifies the column name that will be updated.
-> [ON table_name] - This specifies the name of the table associated with the trigger.
-> [REFERENCING OLD AS o NEW AS n] - This allows you to refer new and old values for various DML statements, such as INSERT, UPDATE, and DELETE.
-> [FOR EACH ROW] - This specifies a row-level trigger, i.e., the trigger will be executed for each row being affected. Otherwise the trigger will execute just once when the SQL statement is executed, which is called a table level trigger.
-> WHEN (condition) - This provides a condition for rows for which the trigger would fire. This clause is valid only for row-level triggers.

Example program
----------------------
CREATE OR REPLACE TRIGGER update_sal 
BEFORE DELETE OR INSERT OR UPDATE ON emp 
FOR EACH ROW 
WHEN (NEW.EMPNO > 0) 
DECLARE 
   sal_diff number; 
BEGIN 
   sal_diff := :NEW.sal  - :OLD.sal; 
   dbms_output.put_line('Old salary: ' || :OLD.sal); 
   dbms_output.put_line('New salary: ' || :NEW.sal); 
   dbms_output.put_line('Salary difference: ' || sal_diff); 
END; 
/ 
When the above code is executed at the SQL prompt, it produces the following result -
Trigger created.

Executing a Trigger
Let us perform some DML operations on the EMP table. Here is one INSERT statement, which will create a new record in the table -
INSERT INTO emp (EMPNO,ENAME,SAL) 
VALUES (8, 'ABCD', 7500);



When a record is created in the EMP table, the above create trigger, display_salary_changes will be fired and it will display the following result -

Old salary: 
New salary: 7500 
Salary difference:

Because this is a new record, old salary is not available and the above result comes as null. 
Let us now perform one more DML operation on the EMP table. The UPDATE statement will update an existing record in the table -

UPDATE emp SET sal = sal + 500 WHERE empno = 8; 

When a record is updated in the EMP table, the above create trigger, display_salary_changes will be fired and it will display the following result -

Old salary: 1500 
New salary: 2000 
Salary difference: 500 

















